# 1. if we list all the natural numbers below
# that are multiples of 3 or 5, we get 3, 5, 6, or 9.
# The sum of these multiples is 23. Find the sum of all
# the multiples of 3 or 5 below 1000.
# sum = 0 # variable to hold sum
# for i in range(1000):
#     if (i % 3 == 0 or i % 5 == 0):
#         sum += i
# print("The answer is: " + str(sum))

# 2. Each new term in the Fibonacci sequence is generated by adding the
# previous two terms. By starting with 1 and 2, the first 10 terms will
# be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …
# By considering the terms in the Fibonacci sequence whose values do not
# exceed four million, find the sum of the even-valued terms.
# num = [1, 2]
# total = 0
# for i in range(4000000):
#     if i == num[-1] + num[-2]:
#         num.append(i)

# for n in num:
#     if n % 2 == 0:
#         total += n
# print(total)

# 3. The prime factors of 13195 are 5, 7, 13 and 29. What is the largest
# prime factor of the number 600851475143?
# x = 600851475143
# def isPrime(n):
#     for i in range(2, int(n**0.5) + 1):
#         if n % i == 0:
#             return False
#         return True
# for i in range(2, x + 1):
#     if isPrime(i) and x % i == 0:
#         print(i)

# 4. A palindromic number reads the same both ways. The largest
# palindrome made from the product of two 2-digit numbers is
# 9009 = 91 × 99. Find the largest palindrome made from the product of
# two 3-digit numbers.
# max_palindrome = 0
# for i in range(100, 1000):
#     for x in range(100, 1000):
#         product = i * x
#         productStr = str(product)
#         if (productStr[0] == productStr[-1]) and (productStr[1] == productStr[-2]) and (productStr[2] == productStr[-3]):
#             if max_palindrome < product:
#                 max_palindrome = product
# print(max_palindrome)

# 5. 2520 is the smallest that can be divisible by each of the number
# from 1 - 10 without any remainder. What is the smallest positive number
# that is evenly divisible by all of the numbers from 1 to 20?
# num = 0
# keepGoing = True
# while keepGoing:
#     num += 20
#     numMultiples = 0
#     for i in range(20, 10, -1):
#         if (num % i != 0):
#             break
#         if (i == 11):
#             keepGoing = False
#             break
#     if num % 1000000 == 0:
#         print(num / 1000000)
# print('The lowest common multiple is: ' + str(num))

# 6. The sum of the squares of the first ten natural numbers is
# The square of the sum of the first ten natural numbers is,
# Hence the difference between the sum of the squares of the first ten
# natural numbers and the square of the sum is .
# Find the difference between the sum of the squares of the first one
# hundred natural numbers and the square of the sum. SEE WEBSITE

# print(sum(range(1, 101))**2 - sum(x**2 for x in range(1, 101)))

# 7. By listing the first 6 prime numbers: 2, 3, 5, 7, 11 and 13,
# we can see that the 6th prime is 13. What is the 10,001st prime number?

# import math
# def isPrime(num):
#     for i in range(2, int(math.sqrt(num))+1):
#         if (num % i == 0):
#             return False
# count = 1 # number of primes
# num = 2 # prime number (count)
#
# while (count < 10001):
#     num += 1
#     if isPrime(num):
#         count += 1
# print(num)

# 8. The four adjacent digits in the 1000-digit number that have the
# greatest product are 9 x 9 x 8 x 9 = 5832. Find the 13th adjacent digit
# in the 1000-digit number that have the greatest product. What is the
# value of this product?

# numbers = '''
# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450
# '''
# numstring = numbers.strip().replace('\n', '')
# greatest_product = 0
#
# for i in range(len(numstring)):
#     product = 1
#     substring = numstring[i:i+13]
#     for digit in substring:
#         product *= int(digit)
#     if product > greatest_product:
#         greatest_product = product
#
# print(greatest_product)

# 9. A Pythagorean triplet is a set of 3 natural numbers, a<b<c, for
# for which a2+b2=c2. E.g. 32+42=9+16=25=52. There exists exactly one
# Pythagorean triplet for which a + b + c = 1000. Find the product abc.
